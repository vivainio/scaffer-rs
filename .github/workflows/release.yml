name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
          - os: macOS-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macOS-latest
            target: aarch64-apple-darwin
            suffix: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/scaffer${{ matrix.suffix }}

      - name: Create archive
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "dist/scaffer-${{ matrix.target }}.zip" "./target/${{ matrix.target }}/release/scaffer${{ matrix.suffix }}"
          else
            tar -czf "dist/scaffer-${{ matrix.target }}.tar.gz" -C "./target/${{ matrix.target }}/release" "scaffer${{ matrix.suffix }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: scaffer-${{ matrix.target }}
          path: dist/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display structure of downloaded files
        run: ls -la dist/

      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release with Assets
        run: |
          # Create release body
          cat > release_body.md << 'EOF'
          ## Changes in ${{ steps.get_version.outputs.VERSION }}
          
          ### Downloads
          - **Linux (x86_64)**: `scaffer-x86_64-unknown-linux-gnu.tar.gz`
          - **Linux (musl)**: `scaffer-x86_64-unknown-linux-musl.tar.gz`
          - **Windows**: `scaffer-x86_64-pc-windows-msvc.zip`
          - **macOS (Intel)**: `scaffer-x86_64-apple-darwin.tar.gz`
          - **macOS (Apple Silicon)**: `scaffer-aarch64-apple-darwin.tar.gz`
          
          ### Installation
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the `scaffer` binary to a directory in your PATH
          4. Run `scaffer --help` to get started
          
          For more information, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          EOF
          
          # Collect all release assets
          assets=""
          for artifact_dir in dist/*/; do
            for file in "$artifact_dir"*; do
              if [ -f "$file" ]; then
                assets="$assets $file"
              fi
            done
          done
          
          # Create release with all assets
          gh release create ${{ steps.get_version.outputs.VERSION }} \
            --title "Release ${{ steps.get_version.outputs.VERSION }}" \
            --notes-file release_body.md \
            $assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Publish to crates.io
  publish:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true  # Don't fail the release if publishing fails 